package CGDremoteVehicleOBE
public
	with EMV2;
	with Base_Types;
	
	system cgdremvehobe
		
		features
			vehicleControlEventLocationMotion_out : out data port Base_Types::Boolean;
			vehicleConttrolEventLocationMotion_in : in data port Base_Types::Float;
			
		flows
			system_vcntrleventloc_source : flow source vehicleControlEventLocationMotion_out;
			system_vcntrleventlocmot_sink : flow sink vehicleConttrolEventLocationMotion_in; 
				
		annex EMV2 {**
			use types error_library; 
		
			error propagations
				vehicleConttrolEventLocationMotion_in : in propagation {NoValue, BadValue, LateValue};
				vehicleControlEventLocationMotion_out : out propagation {NoValue,BadValue, LateValue};
				
			flows
				ef0 : error sink vehicleConttrolEventLocationMotion_in{NoValue,BadValue, LateValue};
				ef1 : error source vehicleControlEventLocationMotion_out{NoValue,BadValue, LateValue};
			end propagations;
			properties
				emv2::hazards => 
					([failure => "ValueError";	
				  	description => "No data , Invalid date or Late data from Remote Vehicle OBEs annd to Roadside Equipment";
					])
			applies to vehicleConttrolEventLocationMotion_in.ValueError,vehicleControlEventLocationMotion_out.ValueError;						
		**};
		
		annex agree{**
			assume "vehicle conrol location motion event signal strength" : vehicleConttrolEventLocationMotion_in = 4.6;
			
			guarantee "send vehicle location motion event signl strength when signal strength is above minimum" : vehicleConttrolEventLocationMotion_in < 4.5 => vehicleControlEventLocationMotion_out;
			**};	
	end cgdremvehobe;
	
	system implementation cgdremvehobe.impl
		annex agree{**
			assert vehicleControlEventLocationMotion_out = 
			if vehicleConttrolEventLocationMotion_in < 4.5 then
				false
			else
				true;
			**};
	end cgdremvehobe.impl;
	
end CGDremoteVehicleOBE;